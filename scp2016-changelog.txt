We are grateful to the reviewers for their useful feedback. This
letter lists the changes that we have made based on their feedback.

Larger changes:

- We changed Section 3 to discuss the cost semantics that could be
  applied in our framework. We also clarify exactly what our costs
  mean (relative to a preview of Section 7/8). (In particular, we take
  a variant of Reviewer 2's third option.)

- We extend Section 6.1 to discuss functions like copy_log_sq_time,
  whether they can be automatically generated and whether we can
  directly prove Big-O results without intermediate exact formulas.

- We extend Section 8 to clarify future work and explain alternative
  approaches, including those suggested by Reviewer 3.

Small changes:

- Each reviewer pointed out some typos and other problems, which we
  addressed.

- Each reviewer had a different perspective on the right way to
  interpret Figure 6, so we have softened our comments. Given that we
  haven't done a formal analysis, it is not appropriate to bold claim
  amortized constant time.

- We have noted the use of the omega tactic.

- We have clarified the definition of the fl_log function

- We have adjust most of the related work paragraphs based on the
  reviewer feedback.

Other Comments:

- Reviewer 1: You ask if the claim in section 7 that iterative fib is
  quadratic if addition is included is proved with our library in the
  paper.

  It is. The paper said, "The supplementary material contains proofs
  of these facts in Coq (@tt{fib/fib_iter.v})." The last theorem in
  the file is the crucial one.

- Reviewer 2: One of your questions is whether it would be
  better/feasible to extract first and then analyze the running time.

  We think that such a system is plausible and there's nothing special
  to add about it, because after extraction Coq code is just vanilla
  ML. We stake out our goal in Section 1: to express the full
  correctness (performance and functional behavior) inside the types
  in a proof assistant like Coq. This may not be the best way to
  analyze the running times of programs, but we think that the
  technical contribution is clear and publication-worthy.

- Reviewer 3: add-plusses/check-stx-errs is defined at line 167 of
  rkt/tmonad/private/the-lang.rkt

- Reviewer 3: You suggest that we merge sections 7 and 8. We feel that
  section 7 is a kind of introduction or preamble to the detailed
  case-by-case discussion in section 8 and think it fits well this
  way. We hope you understand this design.

- Reviewer 3: You ask what is proved in Coq from sections 7 and 8.

  In each case, we reference the Coq theorem file. The behavior of fib
  is proved, as are the performance of add1 and plus, as referenced in
  the case study section.
